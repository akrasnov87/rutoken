import java.text.DecimalFormat
import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// Load keystore
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 34
    ndkVersion "21.0.6113669"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionName getVersion()
        versionCode 6
        setProperty("archivesBaseName", getVersion())
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildFeatures {
        viewBinding = true
    }

    signingConfigs {
        release {
            storeFile file('../sign_key.jks')
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    namespace 'it.alkona.rutoken'
}

dependencies {
    def room_version = "2.4.1"

    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation platform('com.google.firebase:firebase-bom:31.0.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics:18.3.1'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.3.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.0-alpha06'
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.guava:guava:29.0-android'
    implementation 'com.github.mhiew:android-pdf-viewer:3.2.0-beta.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7'
    implementation 'io.insert-koin:koin-android:2.2.2'
    implementation 'io.insert-koin:koin-androidx-viewmodel:2.2.2'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.65'
    implementation 'net.java.dev.jna:jna:5.7.0@aar'
    implementation 'com.github.nsk90:kstatemachine:0.9.0'
    implementation 'ru.rutoken:pkcs11jna:3.3.1@jar'

    kapt "androidx.room:room-compiler:$room_version"

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "android.arch.persistence.room:testing:1.1.1"
}

def requireFileInDirectory(String directory, String file) {
    if (fileTree(dir: directory, include: '**/' + file).isEmpty()) {
        throw new GradleException('Not found ' + file + ' in ' + directory + ' directory')
    }
}

def copyFile(String file, String sourcePath, String destinationPath) {
    try {
        copy {
            include file
            from sourcePath
            into destinationPath
        }
    } catch (ignored) {
        System.println("Could not copy file: " + file)
    }
}

def copyJniLibs(String arch, String jniArch) {
    def jniLibs = "./src/main/jniLibs/$jniArch"

    if (new File("$rootDir/external").exists()) {
        copyFile('librtpkcs11ecp.so', "../external/pkcs11ecp/android-$arch/lib", jniLibs)
    } else { // SDK path
        copyFile('librtpkcs11ecp.so', "../../../android-$arch/lib", jniLibs)
    }

    requireFileInDirectory(jniLibs, 'librtpkcs11ecp.so')
}

preBuild.doLast {
    copyJniLibs('armv7a', 'armeabi-v7a')
    copyJniLibs('arm64', 'arm64-v8a')

    if (new File("$rootDir/external").exists()) {
        copyFile('rtpcsc*.aar', '../external/rtpcsc/java/', 'libs')
        copyFile('pkcs11wrapper*.jar', '../external/pkcs11wrapper/java/', 'libs')
    } else { // SDK path
        copyFile('rtpcsc*.aar', "../../../../pcsc", "libs")
        copyFile('pkcs11wrapper*.jar', "../../../../../../java/samples/pkcs11/lib", "libs")
    }

    requireFileInDirectory('libs', 'rtpcsc*.aar')
    requireFileInDirectory('libs', 'pkcs11wrapper*.jar')
}

/*clean {
    delete fileTree('libs').matching {
        include 'pkcs11jna*.jar', 'rtserviceconnection*.aar', 'pkcs11wrapper*.jar'
    }
}*/

static def startOfDay() {
    def now = new Date().getTime()
    def start = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse("2022-07-25 0:00:00").getTime()

    return new DecimalFormat("#").format(Math.floor(Math.abs(now - start) / (1000 * 3600 * 24)))
}

static def minuteOfDay() {
    def now = new Date()
    return (now.format("HH").toInteger() * 60) + now.format("mm").toInteger()
}

static def getRelease() {
    /**
     * 0 – альфа (прототип);
     * 1 – бета (бета);
     * 2 – выпуск-кандидат (передан на тестирование заказчику);
     * 3 – публичный выпуск (окончательно передан заказчику).
     */
    return 0
}

static def getVersion() {
    return "0." + startOfDay() + "." + getRelease() + "." + minuteOfDay()
}
